version: '3.5'

networks:
  proxy:
    external:
      name: proxy
  internal:

services:
  taiga:
    image: benyanke/taiga:latest
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/conf.json"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 0s
    expose:
      - 80
    depends_on:
      - postgres
      - events
      - rabbit
    links:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.backend=${TAIGA_HOSTNAME}
      - traefik.frontend.rule=Host:${TAIGA_HOSTNAME}
      - traefik.docker.network=proxy
      - traefik.port=80
    networks:
      - proxy
      - internal
    environment:
      # General
      - PUBLIC_REGISTER_ENABLED
      - DEBUG
      - TEMPLATE_DEBUG
      - TAIGA_HOSTNAME
      - ALLOWED_REGISTER_DOMAINS

      # LDAP
      - LDAP_ENABLED
      - LDAP_USE_SSL
      - LDAP_START_TLS
      - LDAP_HOST
      - LDAP_PORT
      - LDAP_BIND_DN
      - LDAP_BIND_PW
      - LDAP_SEARCH_BASE
      - LDAP_ALLOW_NON_LDAP_LOGIN
      - LDAP_ATTR_USERNAME
      - LDAP_ATTR_EMAIL
      - LDAP_ATTR_FULLNAME

      # - Database config
      - TAIGA_DB_HOST
      - TAIGA_DB_NAME
      - TAIGA_DB_USER
      - TAIGA_DB_PASSWORD

      # - Mail config
      - TAIGA_ENABLE_EMAIL
      - TAIGA_EMAIL_NOTIFICATIONS_INTERVAL
      - TAIGA_EMAIL_HOST
      - TAIGA_EMAIL_FROM
      - TAIGA_EMAIL_USE_TLS
      - TAIGA_EMAIL_PORT
      - TAIGA_EMAIL_USER
      - TAIGA_EMAIL_PASS
 
      # Secret key for encryption
      - TAIGA_SECRET_KEY

      # Websockets config
      - TAIGA_EVENTS_ENABLE
 
      # Enable SSL externally, preferred method
      - TAIGA_SSL_BY_REVERSE_PROXY

      # Events via Websockets
      - EVENT_PORT
      - EVENT_USER
      - EVENT_PW
      - EVENT_HOST
      - EVENT_VHOST
      - EVENT_RABBITPORT

    volumes:
      # Media and uploads directory. Required (or you will lose all uploads)
      - ./media:/usr/src/taiga-back/media

# Used if you need direct DB query access temporarily
#  pgclient:
#    image: jbergknoff/postgresql-client
#    depends_on:
#      - postgres
#    environment:
#      - POSTGRES_DB=${TAIGA_DB_NAME}
#      - POSTGRES_USER=${TAIGA_DB_USER}
#      - POSTGRES_PASSWORD=${TAIGA_DB_PASSWORD}
#    links:
#      - postgres:${CONTAINER_NAME_BASE}
#    networks:
#      - internal

  postgres:
    image: postgres
    labels:
      - traefik.enable=false
    environment:
      - POSTGRES_DB=${TAIGA_DB_NAME}
      - POSTGRES_USER=${TAIGA_DB_USER}
      - POSTGRES_PASSWORD=${TAIGA_DB_PASSWORD}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "--dbname=taigadb", "--username=taiga"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 0s
    labels:
      - traefik.enable=false
    networks:
      - internal

  events:
    image: benyanke/taiga-events:latest
    restart: always
    networks:
      - internal
    environment:
      - TAIGA_SECRET_KEY
      - EVENT_PORT
      - EVENT_USER
      - EVENT_PW
      - EVENT_HOST
      - EVENT_VHOST
      - EVENT_RABBITPORT
    labels:
      - traefik.enable=false
    expose:
      - 80
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 0s
    links:
      - rabbit

  # Backend for events
  rabbit:
    image: rabbitmq:3-alpine
    restart: always
    expose:
      - 5672
    labels:
      - traefik.enable=false
    environment:
      - RABBITMQ_DEFAULT_VHOST=${EVENT_VHOST}
      - RABBITMQ_DEFAULT_USER=${EVENT_USER}
      - RABBITMQ_DEFAULT_PASS=${EVENT_PW}
    networks:
      - internal
    healthcheck:
        test: ["CMD", "rabbitmqctl","status"]
        interval: 30s
        timeout: 5s
        retries: 3


# Used for async events - still need to get this working properly - will accept PRs for this
# 
#  redis:
#    image: redis:3
#    restart: always
#    labels:
#      - traefik.enable=false
#    networks:
#      - eventnet
#    healthcheck:
#        test: ["CMD", "redis-cli","ping"]
#        interval: 30s
#        timeout: 5s
#        retries: 3

  #celery:
  #  image: celery
  #  links:
  #    - rabbit
  #  restart: always
  #  labels:
  #    - traefik.enable=false
  #  networks:
  #    - eventnet
  #  healthcheck:
  #    test: ["CMD", "celery","inspect","ping"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3
  #    start_period: 5s

